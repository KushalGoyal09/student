generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supervisor {
  id                 String               @id @default(uuid())
  name               String
  username           String               @unique
  password           String
  SeniorMentor       SeniorMentor[]
  RatingBySupervisor RatingBySupervisor[]
}

model SeniorMentor {
  id          String        @id @default(uuid())
  name        String
  username    String        @unique
  password    String
  rating      Float         @default(0)
  GroupMentor GroupMentor[]

  supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId String?
}

model GroupMentor {
  id       String    @id @default(uuid())
  name     String
  username String    @unique
  password String
  rating   Float     @default(0)
  Student  Student[]

  seniorMentor       SeniorMentor?        @relation(fields: [seniorMentorId], references: [id])
  seniorMentorId     String?
  RatingBySupervisor RatingBySupervisor[]
  RatingByStudent    RatingByStudent[]
  Week               Week[]
  Target             Target[]
}

model Student {
  id             String   @id @default(uuid())
  name           String
  gender         String
  fatherName     String
  motherName     String
  whattsapNumber String   @unique
  callNumber     String
  motherNumber   String
  fatherNumber   String
  language       String
  target         String
  StudyHours     Int
  class          String
  dropperStatus  String
  previousScore  String
  platform       String
  expectation    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  status            Boolean   @default(true)
  dateOfDeactive    DateTime?
  Fees              Fees?
  kitDispatched     Boolean   @default(false)
  kitDispatchedDate DateTime?

  groupMentor GroupMentor? @relation(fields: [groupMentorId], references: [id])

  groupMentorId     String?
  RatingByStudent   RatingByStudent[]
  StudentCallRecord StudentCallRecord[]
  Target            Target[]
}

model Week {
  id          String              @id @default(uuid())
  startDate   String
  endDate     String
  mentorId    String
  GroupMentor GroupMentor         @relation(fields: [mentorId], references: [id])
  students    StudentCallRecord[]

  @@unique([startDate, mentorId])
}

model StudentCallRecord {
  id        String  @id @default(uuid())
  studentId String
  mentorId  String
  weekId    String
  call      Call[]
  Week      Week    @relation(fields: [weekId], references: [id])
  Student   Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, weekId])
}

enum CallStatus {
  Scheduled
  Done
  DNP
}

model Call {
  id              String            @id @default(uuid())
  date            String
  day             DaysOfWeek
  callStatus      CallStatus
  studentRecord   StudentCallRecord @relation(fields: [studentRecordId], references: [id])
  studentRecordId String

  @@unique([date, studentRecordId])
}

enum DaysOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Fees {
  id       String    @id @default(uuid())
  feesPlan Int       @default(1)
  allClear Boolean   @default(false)
  payments Payment[]

  student Student @relation(fields: [studentId], references: [id])

  studentId String @unique
}

model Payment {
  id     String   @id @default(uuid())
  amount Int
  date   DateTime @default(now())
  mode   String?
  fees   Fees     @relation(fields: [feesId], references: [id])

  feesId String
}

model RatingBySupervisor {
  id          String      @id @default(uuid())
  supervisor  Supervisor  @relation(fields: [supervisorId], references: [id])
  groupMentor GroupMentor @relation(fields: [groupMentorId], references: [id])

  status           Int
  meeting          Int
  calling          Int
  responsibility   Int
  availability     Int
  targetAssaigning Int
  targetChecking   Int

  supervisorId  String
  groupMentorId String
}

model RatingByStudent {
  id String @id @default(uuid())

  bonding                     Int
  targetAssaigningAndChecking Int
  calling                     Int
  seriousness                 Int
  exceptation                 String

  studentId     String
  groupMentorId String

  student     Student     @relation(fields: [studentId], references: [whattsapNumber])
  groupMentor GroupMentor @relation(fields: [groupMentorId], references: [id])
}

model Admin {
  username String @id @default("admin")
  password String @default("admin")
}

model PhysicsSyallabus {
  id            Int      @id @default(autoincrement())
  chapterName   String
  Target        Target[]
  createdAt     DateTime @default(now())
}

model ChemistrySyallabus {
  id            Int      @id @default(autoincrement())
  chapterName   String
  Target        Target[]
  createdAt     DateTime @default(now())
}

model BiologySyallabus {
  id            Int      @id @default(autoincrement())
  chapterName   String
  Target        Target[]
  createdAt     DateTime @default(now())
}

model Target {
  id        String  @id @default(uuid())
  studentId String
  mentorId  String
  completed Boolean @default(false)
  physics   Int
  chemistry Int
  biology   Int

  PhysicsChapter   PhysicsSyallabus   @relation(fields: [physics], references: [id])
  ChemistryChapter ChemistrySyallabus @relation(fields: [chemistry], references: [id])
  BiologyChapter   BiologySyallabus   @relation(fields: [biology], references: [id])
  Mentor           GroupMentor        @relation(fields: [mentorId], references: [id])
  Student          Student            @relation(fields: [studentId], references: [id])
}
