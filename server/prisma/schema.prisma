generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  UpdateSyallabus
  FeeManagement
  KitDispatch
  AssaignMentor
}

model Supervisor {
  id                 String               @id @default(uuid())
  name               String
  username           String               @unique
  password           String
  SeniorMentor       SeniorMentor[]
  RatingBySupervisor RatingBySupervisor[]
  permissions        Permission[]
}

model SeniorMentor {
  id          String        @id @default(uuid())
  name        String
  username    String        @unique
  password    String
  GroupMentor GroupMentor[]

  supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId String?
}

model GroupMentor {
  id           String    @id @default(uuid())
  name         String
  username     String    @unique
  password     String
  whattsapLink String?
  Student      Student[]

  seniorMentor       SeniorMentor?        @relation(fields: [seniorMentorId], references: [id])
  seniorMentorId     String?
  RatingBySupervisor RatingBySupervisor[]
  RatingByStudent    RatingByStudent[]
  Week               Week[]
}

model Student {
  id             String   @id @default(uuid())
  name           String
  gender         String
  fatherName     String
  motherName     String
  whattsapNumber String   @unique
  callNumber     String
  motherNumber   String
  fatherNumber   String
  language       String
  target         String
  StudyHours     Int
  class          String
  dropperStatus  String
  previousScore  String
  platform       String
  expectation    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  status            Boolean   @default(true)
  dateOfDeactive    DateTime?
  Fees              Fees?
  kitDispatched     Boolean   @default(false)
  kitDispatchedDate DateTime?

  groupMentor       GroupMentor? @relation(fields: [groupMentorId], references: [id])
  whattsapGroupLink String?

  groupMentorId     String?
  RatingByStudent   RatingByStudent[]
  StudentCallRecord StudentCallRecord[]
  Target            Target[]

  physicsVisionBoard   PhysicsVisionBoard[]
  ChemistryVisionBoard ChemistryVisionBoard[]
  BiologyVisionBoard   BiologyVisionBoard[]
}

model PhysicsVisionBoard {
  id                 String           @id @default(uuid())
  chapter            PhysicsSyallabus @relation(fields: [physicsSyallabusId], references: [id])
  notes              Boolean
  leacture           Boolean
  ncert              Boolean
  QP                 Boolean
  revision           Boolean
  viva               Boolean
  Student            Student          @relation(fields: [studentId], references: [id])
  studentId          String
  physicsSyallabusId Int

  @@unique([studentId, physicsSyallabusId])
}

model ChemistryVisionBoard {
  id                 String             @id @default(uuid())
  chapter            ChemistrySyallabus @relation(fields: [chemistrySyallabusId], references: [id])
  notes              Boolean
  leacture           Boolean
  ncert              Boolean
  QP                 Boolean
  revision           Boolean
  viva               Boolean
  Student            Student            @relation(fields: [studentId], references: [id])
  studentId          String
  chemistrySyallabusId Int

  @@unique([studentId, chemistrySyallabusId])
}

model BiologyVisionBoard {
  id                 String           @id @default(uuid())
  chapter            BiologySyallabus @relation(fields: [biologySyallabusId], references: [id])
  notes              Boolean
  leacture           Boolean
  ncert              Boolean
  QP                 Boolean
  revision           Boolean
  viva               Boolean
  Student            Student          @relation(fields: [studentId], references: [id])
  studentId          String
  biologySyallabusId Int

  @@unique([studentId, biologySyallabusId])
}

model Week {
  id          String              @id @default(uuid())
  startDate   String
  endDate     String
  mentorId    String
  GroupMentor GroupMentor         @relation(fields: [mentorId], references: [id])
  students    StudentCallRecord[]

  @@unique([startDate, mentorId])
}

model StudentCallRecord {
  id        String  @id @default(uuid())
  studentId String
  mentorId  String
  weekId    String
  call      Call[]
  Week      Week    @relation(fields: [weekId], references: [id])
  Student   Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, weekId])
}

enum CallStatus {
  Scheduled
  Done
  DNP
}

model Call {
  id              String            @id @default(uuid())
  date            String
  day             DaysOfWeek
  callStatus      CallStatus
  studentRecord   StudentCallRecord @relation(fields: [studentRecordId], references: [id])
  studentRecordId String

  @@unique([date, studentRecordId])
}

enum DaysOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Fees {
  id             String         @id @default(uuid())
  feesPlan       Int            @default(1)
  allClear       Boolean        @default(false)
  mentorshipPlan MentorshipPlan @default(Elite)
  payments       Payment[]

  student Student @relation(fields: [studentId], references: [id])

  studentId String @unique
}

enum MentorshipPlan {
  Elite
  Pro
  Max
}

model Payment {
  id      String  @id @default(uuid())
  amount  Int
  date    String
  mode    String?
  cleared Boolean @default(false)
  fees    Fees    @relation(fields: [feesId], references: [id])

  feesId String
}

model RatingBySupervisor {
  id          String      @id @default(uuid())
  supervisor  Supervisor  @relation(fields: [supervisorId], references: [id])
  groupMentor GroupMentor @relation(fields: [groupMentorId], references: [id])

  status           Int
  meeting          Int
  calling          Int
  responsibility   Int
  availability     Int
  targetAssaigning Int
  targetChecking   Int

  supervisorId  String
  groupMentorId String

  @@unique([supervisorId, groupMentorId])
}

model RatingByStudent {
  id String @id @default(uuid())

  bonding                     Int
  targetAssaigningAndChecking Int
  calling                     Int
  seriousness                 Int
  exceptation                 String

  studentId     String
  groupMentorId String

  student     Student     @relation(fields: [studentId], references: [id])
  groupMentor GroupMentor @relation(fields: [groupMentorId], references: [id])

  @@unique([studentId, groupMentorId])
}

model Admin {
  username String @id @default("admin")
  password String @default("admin")
}

model PhysicsSyallabus {
  id                 Int                  @id @default(autoincrement())
  chapterName        String
  createdAt          DateTime             @default(now())
  PhysicsTarget      PhysicsTarget[]
  PhysicsVisionBoard PhysicsVisionBoard[]
}

model ChemistrySyallabus {
  id                   Int                    @id @default(autoincrement())
  chapterName          String
  createdAt            DateTime               @default(now())
  ChemistryTarget      ChemistryTarget[]
  ChemistryVisionBoard ChemistryVisionBoard[]
}

model BiologySyallabus {
  id                 Int                  @id @default(autoincrement())
  chapterName        String
  createdAt          DateTime             @default(now())
  BiologyTarget      BiologyTarget[]
  BiologyVisionBoard BiologyVisionBoard[]
}

model Target {
  id         String            @id @default(uuid())
  studentId  String
  completed  Boolean           @default(false)
  date       String
  targetType TargetType
  physics    PhysicsTarget[]
  chemistry  ChemistryTarget[]
  biology    BiologyTarget[]

  Student Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, date, targetType])
}

enum TargetType {
  Regular
  Revision
  Extra
}

model PhysicsTarget {
  id             String           @id @default(uuid())
  chapterId      Int
  PhysicsChapter PhysicsSyallabus @relation(fields: [chapterId], references: [id])
  Target         Target?          @relation(fields: [targetId], references: [id])
  targetId       String?
}

model ChemistryTarget {
  id               String             @id @default(uuid())
  chapterId        Int
  ChemistryChapter ChemistrySyallabus @relation(fields: [chapterId], references: [id])
  Target           Target?            @relation(fields: [targetId], references: [id])
  targetId         String?
}

model BiologyTarget {
  id             String           @id @default(uuid())
  chapterId      Int
  BiologyChapter BiologySyallabus @relation(fields: [chapterId], references: [id])
  Target         Target?          @relation(fields: [targetId], references: [id])
  targetId       String?
}

model Ticket {
  id              String   @id @default(uuid())
  subject         String
  explaination    String?
  audioFile       String?
  status          Boolean  @default(false)
  craetedByUserId String
  createdByRole   Role
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  Supervisor
  SeniorMentor
  GroupMentor
}

model MentorSalary {
  id            String  @id @default(uuid())
  Role          Role
  userId        String
  month         Month
  year          Int
  basePay       Int
  perStudentPay Int
  paid          Boolean @default(false)
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}
